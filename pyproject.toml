[tool.poetry]
name = "sphinx-pandera"
version = "0.0.3"
description = "Sphinx Pandera"
authors = ["Timothée Chehab <t.chehab@has-sante.fr>", "Matthieu Doutreligne <m.doutreligne@has-sante.fr>"]
license = "EUPL-v1.2"
readme = "README.md"
repository = "https://gitlab.has-sante.fr/has-sante/public/alpha/sphinx-pandera"
homepage = "https://gitlab.has-sante.fr/has-sante/public/alpha/sphinx-pandera"
keywords = []
classifiers = [
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [ {include = "sphinxcontrib"}]

# [tool.poetry.urls]
# Changelog = "https://gitlab.has-sante.fr/has-sante/public/alpha/sphinx-pandera/releases"

[tool.poetry.dependencies]
python = "^3.11"

# Project-Specific
python-dotenv = "^0.20.0"
pandera = {version= "^0"}
sphinx = { version = ">=7"}

[tool.poetry.group.documentation]
optional = true
[tool.poetry.group.documentation.dependencies]

# Documentation
importlib-metadata = { version = "^6" }
myst-parser = { version = "^2" }
pygments = { version = "^2" }
pydata-sphinx-theme = { version = "^0" }
sphinx-design = "^0.5.0"

[tool.poetry.group.dev.dependencies]
# Testing
sphinx = { version = ">=7", extras=["test"] }
pytest = "^8"
pytest-cov = "^3"
pytest-mock = "^3"
pytest-sugar = "^0"
# Décommenter pour avoir des tests parallèles
# pytest-xdist = "^2.5.0"
# Linting
## Type Checking and Data Validation
mypy = "^1" # Static type checker
## Code formatting
black = "^24" # see: https://black.readthedocs.io/en/stable/editor_integration.html
## Code quality
isort = "^5.10.1"
pylint = "^2"
## Detect secrets
detect-secrets = "^1.4.0"
## Security Issues
bandit = "^1.7.4"
## Doc string
interrogate = "^1.5.0"
## Automation and management
pre-commit = "^2.17.0"
## Upgrade syntax for newer versions of Python
pyupgrade = "^3.3.1"
## Linter for YAML files
yamllint = "1.29.0"
## various convenient hooks
pre-commit-hooks = "^4.4.0"
types-docutils = "^0.20.0.20240201"
pylint-pytest = "^1.1.7"
ipdb = "^0.13.13"

[tool.poetry.scripts]
cli = "bin.cli:cli"

#################################################################################
# Tooling configs                                                               #
#################################################################################
[tool.bandit]
exclude_dirs = ["tests/", ".*$"]

[tool.black]
line-length = 79
include = '\.pyi?$'

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
parallel = true
source = ["sphinxcontrib"]

[tool.coverage.report]
exclude_lines =[
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
fail_under = 45
show_missing = true
skip_covered = true

[tool.interrogate]
verbose = 0
quiet = false
fail-under = 0
color = true

[tool.isort]
profile = "black"
atomic = "true"
combine_as_imports = "true"
line_length = 79

[tool.mypy]
disallow_untyped_defs = false
files = ["sphinxcontrib/sphinx_pandera/*.py"]
explicit_package_bases = true

ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true

[tool.pylint.basic]
good-names-rgxs = ["^Test_.*$", "logger"]

[tool.pylint.messages_control]
disable = [
  # Explicitly document only as needed
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  # Black & Flake8 purview
  "line-too-long",
  "c-extension-no-member",
]

[tool.pylint.reports]
output-format = "colorized"

[tool.pylint.similarities]
# Ignore imports when computing similarities.
ignore-imports = "yes"

[tool.cruft]
skip = [
    ".git",
    "README.md",
]
[tool.pytest.ini_options]
addopts = ["-rfsxX", "-l", "--tb=short", "--strict-markers", "-vv"]

xfail_strict = "true"
testpaths = ["tests",]
norecursedirs = [".*", "*.egg", "build", "dist",]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
